Untuk menguji API menggunakan **Postman**, berikut adalah langkah-langkah pengaturan untuk setiap endpoint CRUD pada **User Management** dan **Blog Management**:

---

### **1. Setup Environment di Postman**
1. **Buat Environment Baru**:
   - Klik tombol **Environments** di pojok kanan atas Postman.
   - Klik **Add** untuk menambahkan environment baru.
   - Tambahkan variabel berikut:
     - **`API_URL`**: `http://localhost:5000/api`
     - **`userId`**: Kosong (akan diisi setelah registrasi atau login)
     - **`blogId`**: Kosong (akan diisi setelah membuat blog)

2. Klik **Save** untuk menyimpan environment.

---

### **2. Pengaturan Endpoint CRUD**

#### **User Management**
**A. Register User**
- **Method**: `POST`
- **URL**: `{{API_URL}}/register`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Body** (JSON):  
  ```json
  {
      "username": "johndoe",
      "email": "johndoe@example.com",
      "password": "password123"
  }
  ```
- **Expected Response**:  
  ```json
  {
      "message": "User registered successfully",
      "user": {
          "_id": "64a8e37dfc13ae423e00001a",
          "username": "johndoe",
          "email": "johndoe@example.com"
      }
  }
  ```
- **Save the `_id`** ke variable `userId`.

---

**B. Login User**
- **Method**: `POST`
- **URL**: `{{API_URL}}/login`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Body** (JSON):  
  ```json
  {
      "email": "johndoe@example.com",
      "password": "password123"
  }
  ```
- **Expected Response**:  
  ```json
  {
      "message": "Login successful",
      "token": "your-auth-token"
  }
  ```

---

**C. Get User Profile**
- **Method**: `GET`
- **URL**: `{{API_URL}}/profile/{{userId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Expected Response**:  
  ```json
  {
      "username": "johndoe",
      "email": "johndoe@example.com",
      "profile": {
          "bio": "Developer",
          "age": 25
      }
  }
  ```

---

**D. Update User Profile**
- **Method**: `PUT`
- **URL**: `{{API_URL}}/profile/{{userId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Body** (JSON):  
  ```json
  {
      "bio": "Updated Developer",
      "age": 26
  }
  ```
- **Expected Response**:  
  ```json
  {
      "message": "Profile updated successfully",
      "profile": {
          "bio": "Updated Developer",
          "age": 26
      }
  }
  ```

---

**E. Delete User Profile**
- **Method**: `DELETE`
- **URL**: `{{API_URL}}/profile/{{userId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Expected Response**:  
  ```json
  {
      "message": "Profile deleted successfully"
  }
  ```

---

#### **Blog Management**
**A. Create Blog**
- **Method**: `POST`
- **URL**: `{{API_URL}}/blogs`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Body** (JSON):  
  ```json
  {
      "title": "My First Blog",
      "content": "This is the content of my first blog.",
      "author": "John Doe",
      "tags": ["tech", "javascript"],
      "published": true
  }
  ```
- **Expected Response**:  
  ```json
  {
      "message": "Blog created successfully",
      "blog": {
          "_id": "64a8e48efc13ae423e00002b",
          "title": "My First Blog",
          "content": "This is the content of my first blog.",
          "author": "John Doe"
      }
  }
  ```
- **Save the `_id`** ke variable `blogId`.

---

**B. Get All Blogs**
- **Method**: `GET`
- **URL**: `{{API_URL}}/blogs`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Expected Response**:  
  ```json
  [
      {
          "_id": "64a8e48efc13ae423e00002b",
          "title": "My First Blog",
          "content": "This is the content of my first blog.",
          "author": "John Doe"
      }
  ]
  ```

---

**C. Get Blog by ID**
- **Method**: `GET`
- **URL**: `{{API_URL}}/blogs/{{blogId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Expected Response**:  
  ```json
  {
      "_id": "64a8e48efc13ae423e00002b",
      "title": "My First Blog",
      "content": "This is the content of my first blog.",
      "author": "John Doe"
  }
  ```

---

**D. Update Blog**
- **Method**: `PUT`
- **URL**: `{{API_URL}}/blogs/{{blogId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Body** (JSON):  
  ```json
  {
      "title": "Updated Blog Title",
      "content": "Updated blog content.",
      "tags": ["updated", "blog"],
      "published": false
  }
  ```
- **Expected Response**:  
  ```json
  {
      "message": "Blog updated successfully",
      "blog": {
          "_id": "64a8e48efc13ae423e00002b",
          "title": "Updated Blog Title",
          "content": "Updated blog content."
      }
  }
  ```

---

**E. Delete Blog**
- **Method**: `DELETE`
- **URL**: `{{API_URL}}/blogs/{{blogId}}`
- **Headers**:  
  - `Content-Type`: `application/json`
- **Expected Response**:  
  ```json
  {
      "message": "Blog deleted successfully"
  }
  ```

---

### **Catatan**
- Pastikan server (`http://localhost:5000`) berjalan sebelum melakukan tes di Postman.
- Simpan variable `userId` dan `blogId` di environment setelah berhasil melakukan operasi create.
- Gunakan tab **Tests** di Postman untuk otomatis menyimpan variabel:
```javascript
pm.environment.set("userId", pm.response.json().user._id);
pm.environment.set("blogId", pm.response.json().blog._id);
``` 

Dengan langkah ini, Anda bisa mengelola API dengan mudah di Postman! ðŸš€